mport matplotlib.pyplot as plt
import numpy as np

def quadratic_temperature_model(time, a, b, c):
    """Calculates the temperature based on a quadratic model.

    Args:
        time (np.ndarray): Array of time values.
        a (float): Coefficient for the squared time term.
        b (float): Coefficient for the linear time term.
        c (float): Constant term representing the base temperature.

    Returns:
        np.ndarray: Array of calculated temperature values.
    """

    temperature = a * time**2 + b * time + c
    return temperature

# List of coefficient sets (a, b, c)
coefficient_sets = [(0.02, 1.5, 28), (0.01, 2.0, 18), (0.03, 1.25, 25)]  # Corrected typos

# Generate time values from 8 to 50 with step 1 (inclusive)
time_values = np.arange(8, 51, 1)

# Plotting the results for each set of coefficients
plt.figure(figsize=(8, 6))  # Set a reasonable figure size

for i, (a, b, c) in enumerate(coefficient_sets):
    temperature_values = quadratic_temperature_model(time_values, a, b, c)
    label = f'Set {i+1}: a={a:.2f}, b={b:.2f}, c={c:.2f}'  # Improved label formatting
    plt.plot(time_values, temperature_values, label=label)

# Plotting details
plt.xlabel('Time')
plt.ylabel('Temperature')
plt.title('Quadratic Temperature Model with Multiple Sets of Coefficients')
plt.legend()
plt.grid(True)

plt.tight_layout()  # Improve spacing between elements
plt.show()
